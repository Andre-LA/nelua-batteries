--[[
Algorithm module contains various algorithms to be used in containers,
such as sort and stable sort.

* TODO: support 1 indexed containers (sequence)
* TODO: use quick sort for `sort`
* TODO: use merge sort for `stablesort`
]]

global algorithm: type = @record{}

-- Concept used to pass contiguous containers by reference.
local contiguous_reference_concept: type = #[concept(function(x)
  local container_type = x.type:implicit_deref_type()
  if not container_type.is_contiguous then
    return false, string.format("type '%s' cannot be a reference to a contiguous container", x.type)
  end
  return types.PointerType(container_type)
end)]#

function algorithm.stablesort(a: contiguous_reference_concept, f: auto)
  -- Optimized bubble sort (as in https://en.wikipedia.org/wiki/Bubble_sort)
  local n: usize = (@usize)(#a)
  if n <= 1 then return end
  local m: usize = n-1
  repeat
    local newn: usize = 0
    for i=1,m do
      local j: usize = i - 1
      ## if f.type.is_niltype then
      local lt: boolean = a[i] < a[j]
      ## elseif f.type.is_function then
      local lt: boolean = f(a[i], a[j])
      ## else static_error('`f` is not comparison function') end
      if lt then
        a[j], a[i] = a[i], a[j]
        newn = i
      end
    end
    n = newn
  until n <= 1
end

function algorithm.sort(a: contiguous_reference_concept, f: auto)
  -- TODO: use quick sort instead of falling back to bubble sort
  return algorithm.stablesort(a, f)
end

return algorithm
