--[[
Algorithm module contains various algorithms to be used in containers,
such as sort and stable sort.

-- TODO: support sequence
-- TODO: use QuickSort, TimSort or Smoothsort instead?
]]

global algorithm: type = @record{}

-- Concept used to pass contiguous containers by reference.
local sortable_reference_concept: type = #[concept(function(x)
  local container_type = x.type:implicit_deref_type()
  if not container_type.is_contiguous then
    return false, string.format("type '%s' cannot be a reference to a contiguous container", x.type)
  end
  if container_type.is_sequence then
    return false, 'sort does not support yet sequence containers'
  end
  return types.PointerType(container_type)
end)]#

-- Auxiliary macro to compare values being sorted.
## local function sort_lt(comp, a, b)
  ## if comp.type.is_niltype then
    in #[a]# < #[b]#
  ## elseif comp.type.is_function then
    in comp(#[a]#, #[b]#)
  ## else
    ## static_error('`comp` is not comparison function')
  ## end
## end

--[[
Sorts all contiguous container `a` elements into ascending order (in-place).

If `comp` is given, then it must be a function that receives two list elements
and returns true when the first element must come before the second in the final order,
so that, after the sort, `i <= j` implies `not comp(a[j],a[i])`.
If `comp` is not given, then the standard operator `<` is used instead.

The `comp` function must define a consistent order;
more formally, the function must define a strict weak order.

The sort algorithm is not stable, that is,
different elements considered equal by the given order may have their
relative positions changed by the sort.
]]
function algorithm.sort(a: sortable_reference_concept, comp: auto): void
  -- Heap sort (as in http://en.wikibooks.org/wiki/Algorithm_implementation/Sorting/Heapsort)
  local n: isize = #a
  if n <= 1 then return end
  local i: isize = n // 2
  local parent: isize, child: isize
  local t
  while true do
    if i > 0 then
      i = i - 1
      t = a[i]
    else
      n = n -1
      if n <= 0 then return end
      t = a[n]
      a[n] = a[0]
    end
    parent = i
    child = i * 2 + 1
    while child < n do
      if child + 1 < n and #[sort_lt]#(comp, a[child], a[child + 1]) then
        child = child + 1
      end
      if #[sort_lt]#(comp, t, a[child]) then
        a[parent] = a[child]
        parent = child
        child = parent * 2 + 1
      else
        break
      end
    end
    a[parent] = t
  end
end

--[[
Like `algorithm.sort`, however the sort is stable.

The sort algorithm is stable, that is,
different elements considered equal by the given order will preserve their relative positions.

Use `sort` instead if you don't need to preserve stability, as it is faster.
]]
function algorithm.stablesort(a: sortable_reference_concept, comp: auto): void
  -- Insertion sort (as in https://en.wikipedia.org/wiki/Insertion_sort)
  local n: isize = #a
  if n <= 1 then return end
  local i: isize = 1
  for i: isize = 1,<n do
    local x = a[i]
    local j: isize = i - 1
    while j >= 0 and #[sort_lt]#(comp, x, a[j]) do
      a[j+1] = a[j]
      j = j - 1
    end
    a[j+1] = x
    i = i + 1
  end
end

return algorithm
