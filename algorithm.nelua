--[[
Algorithm module contains various algorithms to be used in containers,
such as sort and stable sort.
]]

require 'allocators.general'

global algorithm: type = @record{}

-- Concept used to pass contiguous containers by reference.
local as_span_concept: type = #[concept(function(x)
  local container_type = x.type:implicit_deref_type()
  if not container_type.is_contiguous or not container_type.subtype then
    return false, string.format("type '%s' cannot be a reference to a contiguous container", x.type)
  end
  return span.value(container_type.subtype)
end)]#

-- Auxiliary macro to compare values being sorted.
## local function sort_lt(comp, a, b)
  ## if comp.type.is_niltype then
    in #[a]# < #[b]#
  ## elseif comp.type.is_function then
    in comp(#[a]#, #[b]#)
  ## else
    ## static_error('`comp` is not comparison function')
  ## end
## end

--[[
Sorts contiguous container `a` elements into ascending order.

If `comp` is given, then it must be a function that receives two list elements
and returns true when the first element must come before the second in the final order,
so that, after the sort, `i <= j` implies `not comp(a[j],a[i])`.
If `comp` is not given, then the standard operator `<` is used instead.

The sort algorithm is stable, that is,
different elements considered equal by the given order will preserve their relative positions.

The sort algorithm may not be in-place, that is,
it may allocates an auxiliary buffer temporarily to perform the sort operation,
use `heapsort` if you wish to avoid that.
]]
function algorithm.sort(a: as_span_concept, comp: auto): void
  -- Tim Sort
  local T: type = #[a.type.subtype]#
  local n: usize = #a
  if n <= 1 then return end
  local width: usize = 0
  do -- calculate width (minrun)
    local m: usize = n
    while m >= 64 do
      width = width | (m & 1)
      m = m >> 1
    end
    width = width + m
  end
  -- Insertion Sort
  local high: usize = n-1
  for left: usize=0,<=high,width do
    local right: usize = left+width-1
    if high < right then right = high end
    for i: usize = left + 1,right do
      local x: T = a[i]
      local j: usize = i
      while j >= left+1 and #[sort_lt]#(comp, x, a[j-1]) do
        a[j] = a[j-1]
        j = j - 1
      end
      a[j] = x
    end
  end
  -- Merge Sort
  if width > high then return end
  local temp: span(T) = general_allocator:spanalloc(@T, n)
  while width <= high do
    local i: usize = 0
    while i < high do
      local left_end: usize = i + width - 1
      local right: usize = left_end + 1
      if right > high then break end
      do -- merge
        local left_start: usize = i
        -- advance left start to do less left copy (optimization)
        while left_start <= left_end and not #[sort_lt]#(comp, a[right], a[left_start]) do
          left_start = left_start + 1
        end
        if left_start <= left_end then -- perform merge only if unsorted (optimization)
          temp[left_start] = a[right]
          right = right + 1
          local left: usize = left_start
          local index: usize = left_start + 1
          local right_end: usize = left_end + width
          if right_end > high then right_end = high end
          while left <= left_end and right <= right_end do
            if #[sort_lt]#(comp, a[right], a[left]) then
              temp[index] = a[right]
              right = right + 1
            else
              temp[index] = a[left]
              left = left + 1
            end
            index = index + 1
          end
          while left <= left_end do
            temp[index] = a[left]
            left = left + 1
            index = index + 1
          end
          -- note that we have skip unnecessary right copy (optimization)
          for j: usize=left_start,<right do
            a[j] = temp[j]
          end
        end
      end
      i = i + width + width
    end
    width = width + width
  end
  general_allocator:spandealloc(temp)
end

--[[
Like `sort` but the operation is done in-place, that is, no temporary extra memory is allocated.
Sorts all contiguous container `a` elements into ascending order (in-place).

The sort algorithm is not stable, that is,
different elements considered equal by the given order may have their
relative positions changed by the sort.
]]
function algorithm.heapsort(a: as_span_concept, comp: auto): void
  -- Heap sort (as in http://en.wikibooks.org/wiki/Algorithm_implementation/Sorting/Heapsort)
  local n: isize = #a
  if n <= 1 then return end
  local i: isize = n // 2
  local parent: isize, child: isize
  local t
  while true do
    if i > 0 then
      i = i - 1
      t = a[i]
    else
      n = n -1
      if n <= 0 then return end
      t = a[n]
      a[n] = a[0]
    end
    parent = i
    child = i * 2 + 1
    while child < n do
      if child + 1 < n and #[sort_lt]#(comp, a[child], a[child + 1]) then
        child = child + 1
      end
      if #[sort_lt]#(comp, t, a[child]) then
        a[parent] = a[child]
        parent = child
        child = parent * 2 + 1
      else
        break
      end
    end
    a[parent] = t
  end
end

--[[
Removes all elements satisfying criteria `pred` from contiguous container `a`,
and returns the new size of the container after removing the elements.

Removing is done by shifting the elements in such a way that the elements
that are not to be removed appear in the beginning of the container.
Relative order of the elements that remain is preserved
and the physical size of the container is unchanged.
]]
function algorithm.removeif(a: as_span_concept, pred: auto, param: auto): usize
  local j: usize = 0
  local n: usize = (@usize)(#a)
  for i:usize=0,<(@usize)(#a) do
    ## if param.type.is_niltype then
    local remove = pred(a[i])
    ## else
    local remove = pred(a[i], param)
    ## end
    if not remove then
      a[j], a[i] = a[i], a[j]
      j = j + 1
    end
  end
  return j
end

--[[
Unpacks and returns the first `n` elements from contiguous container `a`.
]]
function algorithm.unpackn(a: as_span_concept, n: usize <comptime>)
  ##[[
  local rets = {}
  for i=0,n.value-1 do
    table.insert(rets, aster.KeyIndex{aster.Number{i}, aster.Id{'a'}})
  end
  ]]
  return #[aster.unpack(rets)]#
end

return algorithm
