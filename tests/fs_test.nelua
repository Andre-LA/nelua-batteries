require 'fs'

-- Remove temporary test files
fs.rmdir('tempdir')
fs.rmdir('tempdir2')
fs.rmfile('tempfile')
fs.rmfile('tempfile2')
fs.rmfile('tempfile3')
fs.rmfile('tempfile4')

local pwd: string <close> = fs.cwdir()
local newdir: string <close> = string.format('%s%s%s', pwd, fs.sep, 'tempdir')
local newdir2: string <close> = string.format('%s%s%s', pwd, fs.sep, 'tempdir2')
assert(fs.chdir(pwd))
assert(fs.mkdir(newdir))
assert(fs.chdir(newdir))
local newpwd: string <close> = fs.cwdir()
assert(newpwd == newdir)
assert(fs.chdir(pwd))
assert(fs.isdir(newdir))
assert(fs.move(newdir, newdir2))
assert(fs.rmdir(newdir2))

assert(fs.mkfile('tmpfile'))
local si: fs.StatInfo = fs.stat('tmpfile')
assert(si.kind == fs.StatKind.FILE and si.size == 0)
assert(fs.isfile('tmpfile'))
assert(fs.touch('tmpfile'))
assert(fs.move('tmpfile', 'tmpfile2'))
assert(fs.rmfile('tmpfile2'))

assert(fs.mkfile('tmpfile', 'hello!'))
local contents: string <close> = fs.readfile('tmpfile')
assert(contents == 'hello!')
do -- symbolic link
  assert(fs.mklink('tmpfile', 'tmpfile2'))
  assert(fs.stat('tmpfile2').kind == fs.StatKind.FILE)
  ## if not ccinfo.is_windows then
  assert(fs.stat('tmpfile2', true).kind == fs.StatKind.LINK)
  ## end
  local contents: string <close> = fs.readfile('tmpfile2')
  assert(contents == 'hello!')
  local linktarget: string <close> = fs.readlink('tmpfile2')
  ## if not ccinfo.is_windows then
  assert(linktarget == 'tmpfile')
  ## end
  assert(fs.rmfile('tmpfile2'))
end
do -- hard link
  assert(fs.mklink('tmpfile', 'tmpfile3', true))
  local contents: string <close> = fs.readfile('tmpfile3')
  assert(contents == 'hello!')
  assert(fs.stat('tmpfile3').kind == fs.StatKind.FILE)
  ## if not ccinfo.is_windows then
  assert(fs.stat('tmpfile3', true).kind == fs.StatKind.LINK)
  ## end
  assert(fs.rmfile('tmpfile3'))
end
## if not ccinfo.is_windows then
  assert(fs.chown('tmpfile', si.uid, si.gid))
## end
do -- copy file
  fs.cpfile('tmpfile', 'tmpfile4')
  local contents: string <close> = fs.readfile('tmpfile4')
  assert(contents == 'hello!')
  assert(fs.rmfile('tmpfile4'))
end
assert(fs.chmod('tmpfile', si.mode))
assert(fs.rmfile('tmpfile'))
print 'fs OK!'
